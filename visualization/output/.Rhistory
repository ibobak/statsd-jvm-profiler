install.packages('Imap')
x <- (1,2,3)
sum(x)
x <- c(1,2,3)
sum(x)
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\Projects_Scala\SparkOne\R\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, ","))
summary <- sum(contents)
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, ","))
print(contents)
summary <- sum(contents)
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, ","))
str(contents)
summary <- sum(contents)
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, " "))
str(contents)
summary <- sum(contents)
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, " "))
str(contents)
summary <- sum(contents[0])
str(summary)
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, " "))
summary <- sum(unlist(contents))
write(mydist, stdout())
}
#!/usr/bin/env Rscript
#f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\R\\file.txt")
open(f)
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, " "))
summary <- sum(unlist(contents))
write(summary, stdout())
}
#!/usr/bin/env Rscript
# f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\_hdfs_emulation\\input_rpipe\\file1.txt")
open(f)
globalsum <- 0
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- Map(as.numeric, strsplit(line, ","))
globalsum <- globalsum + sum(unlist(contents))
print(globalsum)
}
write(globalsum, stdout())
#!/usr/bin/env Rscript
# f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\_hdfs_emulation\\input_rpipe\\file1.txt")
open(f)
globalsum <- 0
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- unlist(Map(as.numeric, strsplit(line, " ")))
str(contents)
globalsum <- globalsum + sum((contents))
print(globalsum)
}
write(globalsum, stdout())
#!/usr/bin/env Rscript
# f <- file("stdin")
f <- file("D:\\Projects_Scala\\SparkOne\\_hdfs_emulation\\input_rpipe\\file1.txt")
open(f)
globalsum <- 0
while(length(line <- readLines(f, n=1)) > 0) {
# parse numbers from a line
contents <- unlist(Map(as.numeric, strsplit(line, " ")))
globalsum <- globalsum + sum(contents)
}
write(globalsum, stdout())
apropos("confusion")
RSiteSearch("confusion", restrict="functions")
library("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModelin")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
R.Version()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
View(segmentationOriginal)
help(subset)
help(apply)
?train
??train
?combn
combn(c(1,2,3), 2)
combn(c(1,2,3), 2, FUN=prod)
library('ROCR')
library('ggplot2')
# predcol = c(0.12, 0.8, 0.5): vector with probabilities
# outcol = c("1", "0", "1"):  vector with prediction values - can be ANY kind of values
# pos = "1": positive outcome
calcAUC <- function(predcol, outcol, pos) {
perf <- performance(prediction(predcol, outcol==pos), 'auc')
as.numeric(perf@y.values)
}
# sample of usage
# calcAUC(predict(theLM, newdata=dTrain), dTrain[,outcome], "1")
plotROC <- function(predcol, outcol, pos) {
p <- prediction(predcol, outcol==pos)
#print(class(p))
#print(p)
perf <- performance(p, 'tpr', 'fpr')
#print(perf)
#print(class(perf))
pf <- data.frame(
FalsePositiveRate=perf@x.values[[1]],
TruePositiveRate=perf@y.values[[1]])
ggplot() +
geom_point(data=pf,aes(x=FalsePositiveRate,y=TruePositiveRate)) +
geom_line(aes(x=c(0,1),y=c(0,1)))
}
print(plotROC( knnPred(dTest[,selVars]), dTest[,outcome], "1"))
load("NatalRiskData.rData")
load("D:\\Projects_R\\PracticalDataScienceR\\zmPDSwR\\CDC\\NatalRiskData.rData")
View(sdata)
View(sdata)
train <- sdata[sdata$ORIGRANDGROUP<=5,]
test <- sdata[sdata$ORIGRANDGROUP>5,]
complications <- c("ULD_MECO","ULD_PRECIP","ULD_BREECH")
riskfactors <- c("URF_DIAB", "URF_CHYPER", "URF_PHYPER", "URF_ECLAM")
y <- "atRisk"
x <- c("PWGT",
"UPREVIS",
"CIG_REC",
"GESTREC3",
"DPLURAL",
"DBWT",
complications,
riskfactors)
x
fmla <- paste(y, paste(x, collapse="+"), sep="~")
print(fmla)
model <- glm(fmla, data=train, family=binomial(link="logit"))
train$pred <- predict(model, newdata=train, type="response")
test$pred <- predict(model, newdata=test, type="response")
str(train)
calcAUC(train$pred, train$atRisk, T)
calcAUC(test$pred, test$atRisk, T)
print(plotROC(train$pred, train$atRisk,  T))
print(plotROC(test$pred, test$atRisk,  T))
ggplot(data=train) +  geom_density(aes(x=pred,color=as.factor(atRisk)))
ggplot(data=test) +  geom_density(aes(x=pred,color=as.factor(atRisk)))
sum(train$atRisk) ; length(train$atRisk)
sum(train$pred)
library(grid)
predObj <- prediction(train$pred, train$atRisk)
precObj <- performance(predObj, measure="prec")
recObj <- performance(predObj, measure="rec")
precision <- (precObj@y.values)[[1]]
prec.x <- (precObj@x.values)[[1]]
plot(prec.x, precision)
recall <- (recObj@y.values)[[1]]
rocFrame <- data.frame(threshold=prec.x, precision=precision, recall=recall)
nplot <- function(plist) {
n <- length(plist)
grid.newpage()
pushViewport(viewport(layout=grid.layout(n,1)))
vplayout=function(x,y) {viewport(layout.pos.row=x, layout.pos.col=y)}
for(i in 1:n) {
print(plist[[i]], vp=vplayout(i,1))
}
}
pnull <-  mean(as.numeric(train$atRisk))
p1 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=precision/pnull)) +
coord_cartesian(xlim = c(0,0.05), ylim=c(0,10) )
p2 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=recall)) +
coord_cartesian(xlim = c(0,0.05) )
nplot(list(p1, p2))
df <- read.table("D:\\Projects_R\\mihailov\\s.txt", sep="\t", header=TRUE)
df <- read.table("D:\\Projects_R\\mihailov\\s.txt", sep="\t", header=TRUE)
library(xlsx)
library(xlsx)
install.packages(xlsx)
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
filters <- c('Heap')
filter <- 'Heap'
# for (filter in filters){
newfilename <- paste(paste(paste(filename, '_', sep = ""), filter, sep=""), '.png', sep="")
newfilename
d <- subset(df, df$group==filter)
output(d, filter, newfilename, 700, 700)
setwd("D:\\Projects_BigData\\__Profiling_StatsD\\Projects\\statsd-jvm-profiler\\visualization\\output")
filename <- "memory_jvm_2015_07_28_12_07_26_162__vin-h5.poc-vin.cloud.edmunds.com_30142.txt"
# args <- commandArgs(trailingOnly = TRUE)
# filename <- args[1]
df <- read.csv(filename, sep = '\t', header = FALSE)
colnames(df) <- c("group", "measure", "time", "value")
df$time <- as.POSIXlt(df$time)
# str(df)
library(ggplot2)
library(scales)
normalFormat <- function(l) {
format(l, scientific = FALSE, big.mark=' ')
}
output <- function(d, caption, filename, xsize, ysize){
png(height=xsize, width=ysize, file=filename)
p <- ggplot(data=d) + geom_line(aes(x=time, y=value, colour=measure), size=1.3) +
ggtitle(caption) +
expand_limits(y=0) +
scale_x_datetime(labels=date_format("%d-%m-%Y %H:%M:%S")) +
scale_y_continuous(labels = normalFormat) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
dev.off()
}
# filters <- c('Heap', 'Non Heap', 'Pending Finalization Count', 'GC', 'Class Count')
filters <- c('Heap')
filter <- 'Heap'
# for (filter in filters){
newfilename <- paste(paste(paste(filename, '_', sep = ""), filter, sep=""), '.png', sep="")
newfilename
d <- subset(df, df$group==filter)
output(d, filter, newfilename, 700, 700)
#}
filters <- c('Heap', 'Non Heap', 'Pending Finalization Count', 'GC', 'Class Count')
for (filter in filters){
newfilename <- paste(paste(paste(filename, '_', sep = ""), filter, sep=""), '.png', sep="")
newfilename
d <- subset(df, df$group==filter)
output(d, filter, newfilename, 700, 700)
}
